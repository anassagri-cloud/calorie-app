import streamlit as st

def calculate_bmr(weight: float, height: float, age: int, gender: str) -> float:
    if gender == "ุฐูุฑ":
        return 10 * weight + 6.25 * height - 5 * age + 5
    elif gender == "ุฃูุซู":
        return 10 * weight + 6.25 * height - 5 * age - 161
    else:
        return 0

def get_activity_factor(level: str) -> float:
    levels = {
        "ุฎุงูู (ุจุฏูู ูุดุงุท)": 1.2,
        "ูุดุงุท ุฎููู (1-3 ุฃูุงู/ุฃุณุจูุน)": 1.375,
        "ูุดุงุท ูุชูุณุท (3-5 ุฃูุงู/ุฃุณุจูุน)": 1.55,
        "ูุดุงุท ุนุงูู (6-7 ุฃูุงู/ุฃุณุจูุน)": 1.725,
        "ูุดุงุท ุดุฏูุฏ ุฌุฏูุง": 1.9
    }
    return levels.get(level, 1.2)

def calculate_calories(weight, height, age, gender, activity, goal):
    bmr = calculate_bmr(weight, height, age, gender)
    tdee = bmr * get_activity_factor(activity)
    if goal == "ุฎุณุงุฑุฉ ุงููุฒู":
        calories = tdee - 500
    elif goal == "ุฒูุงุฏุฉ ุงููุฒู":
        calories = tdee + 500
    else:
        calories = tdee

    protein = (calories * 0.3) / 4
    carbs = (calories * 0.4) / 4
    fats = (calories * 0.3) / 9

    return {
        "BMR": round(bmr, 2),
        "TDEE": round(tdee, 2),
        "Calories": round(calories, 2),
        "Protein (g)": round(protein, 1),
        "Carbs (g)": round(carbs, 1),
        "Fats (g)": round(fats, 1)
    }

st.set_page_config(page_title="๐ฅ ุญุงุณุจุฉ ุงูุณุนุฑุงุช ุงูุญุฑุงุฑูุฉ", layout="centered")
st.title("๐ฅ ุญุงุณุจุฉ ุงูุณุนุฑุงุช ุงูุญุฑุงุฑูุฉ ุงูููููุฉ")
st.markdown("ุงุญุณุจ ุงุญุชูุงุฌู ุงููููู ูู ุงูุณุนุฑุงุช ุจูุงุกู ุนูู ูุฒููุ ุทูููุ ุนูุฑูุ ููุดุงุทู.")

col1, col2 = st.columns(2)
with col1:
    gender = st.selectbox("ุงูุฌูุณ", ["ุฐูุฑ", "ุฃูุซู"])
    weight = st.number_input("ุงููุฒู (ูุฌู)", 40, 200, 70)
    height = st.number_input("ุงูุทูู (ุณู)", 120, 220, 170)
with col2:
    age = st.number_input("ุงูุนูุฑ", 10, 80, 25)
    activity = st.selectbox(
        "ูุณุชูู ุงููุดุงุท",
        ["ุฎุงูู (ุจุฏูู ูุดุงุท)", "ูุดุงุท ุฎููู (1-3 ุฃูุงู/ุฃุณุจูุน)", "ูุดุงุท ูุชูุณุท (3-5 ุฃูุงู/ุฃุณุจูุน)",
         "ูุดุงุท ุนุงูู (6-7 ุฃูุงู/ุฃุณุจูุน)", "ูุดุงุท ุดุฏูุฏ ุฌุฏูุง"]
    )
    goal = st.radio("ุงููุฏู", ["ุฎุณุงุฑุฉ ุงููุฒู", "ุซุจุงุช ุงููุฒู", "ุฒูุงุฏุฉ ุงููุฒู"])

if st.button("ุงุญุณุจ ุงูุณุนุฑุงุช ๐ฅ"):
    result = calculate_calories(weight, height, age, gender, activity, goal)

    st.subheader("๐น ุงููุชุงุฆุฌ:")
    st.write(f"**ูุนุฏู ุงูุฃูุถ ุงูุฃุณุงุณู (BMR):** {result['BMR']} ุณุนุฑุฉ")
    st.write(f"**ุงูุณุนุฑุงุช ุงูููููุฉ (TDEE):** {result['TDEE']} ุณุนุฑุฉ")
    st.write(f"**ุงูุณุนุฑุงุช ุงููุทููุจุฉ ููุฏูู:** {result['Calories']} ุณุนุฑุฉ")

    st.markdown("---")
    st.subheader("๐ฝ๏ธ ุชูุฒูุน ุงููุงูุฑูุฒ:")
    col1, col2, col3 = st.columns(3)
    col1.metric("ุจุฑูุชูู (ุบุฑุงู)", result["Protein (g)"])
    col2.metric("ูุฑุจูููุฏุฑุงุช (ุบุฑุงู)", result["Carbs (g)"])
    col3.metric("ุฏููู (ุบุฑุงู)", result["Fats (g)"])

    st.markdown("---")
    st.info("๐ก ูุตูุญุฉ: ููููู ุชุนุฏูู ุงูุฃูุฏุงู ุฃุณุจูุนููุง ุญุณุจ ุชุทูุฑ ูุฒูู.")
